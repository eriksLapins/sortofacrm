generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  role           ERole     @default(USER)
  name           String
  lastname       String
  initials       String
  email          String    @unique
  emailVerified  DateTime?
  username       String    @unique
  password       String?
  phoneExtension String?
  phoneNumber    String?
  image          String?
  position       String?
  departmentId   Int

  @@index([departmentId])
  @@map("users")
}

model UserPreferences {
  id             Int    @id @default(autoincrement())
  userId         Int
  module         String
  preferenceType String
  preferences    Json?

  @@index([userId])
}

model PreferenceTypes {
  id                 Int    @id @default(autoincrement())
  clientCompanyId    Int
  preferenceTypeName String

  @@unique([preferenceTypeName])
}

model ClientCompany {
  id                    Int     @id @default(autoincrement())
  legalName             String
  alternateName         String?
  shortName             String
  regNo                 String
  taxNo                 String?
  street                String
  streetNo              Int
  apartmentNo           Int?
  city                  String
  country               String
  fullAddress           String
  phoneExtension        String
  phone                 String
  email                 String
  bankAccount           String
  swift                 String
  additionalBankAccount String?
  additionalSwift       String?
  webpage               String?
  logo                  String?
  uploadDirectory       String?
  isMain                Boolean
}

model Company {
  id                    Int     @id @default(autoincrement())
  legalName             String
  alternateName         String?
  regNo                 String
  taxNo                 String?
  street                String
  streetNo              Int
  apartmentNo           Int?
  city                  String
  country               String
  fullAddress           String
  phoneExtension        String?
  phone                 String?
  email                 String
  bankAccount           String?
  swift                 String?
  additionalBankAccount String?
  additionalSwift       String?
  webpage               String?
  logo                  String?

  @@index([alternateName])
  @@index([legalName])
}

model Department {
  id   Int    @id @default(autoincrement())
  name String

  @@unique([name])
}

model Person {
  id             Int     @id @default(autoincrement())
  name           String
  lastname       String?
  position       String?
  phoneExtension String?
  phone          String?
  email          String?
  department     String?

  @@index([name])
  @@index([lastname])
  @@index([email])
}

model Relations {
  id              Int    @id @default(autoincrement())
  relatedFromType String
  relatedFromId   Int /// ID of the person/company/etc making the relation from
  relatedToType   String
  relatedToId     Int /// ID of the person/company/etc making the relation to

  @@index([relatedFromType])
  @@index([relatedToType])
}

model RelationTypes {
  id               Int    @id @default(autoincrement())
  relationTypeName String

  @@unique([relationTypeName])
}

model Permissions {
  id     Int              @id @default(autoincrement())
  userId Int
  module String
  can    EPermissionTypes

  @@index([userId])
  @@map("permissions")
}

model ItemPermissions {
  id     Int                  @id @default(autoincrement())
  userId Int
  itemId Int
  module String
  can    EItemPermissionTypes
}

model FieldPermissions {
  id              Int                  @id @default(autoincrement())
  userId          Int
  fieldKey        String
  module          String
  clientCompanyId Int?
  can             EItemPermissionTypes
}

model Pages {
  userId   Int
  id       Int    @id @default(autoincrement())
  name     String
  title    String
  position Int
}

model Blocks {
  id              Int     @id @default(autoincrement())
  userId          Int
  pagePath        String  @db.VarChar(150)
  verticalOrder   Int     @default(0)
  horizontalOrder Int     @default(0)
  width           Int     @default(300)
  height          Int     @default(300)
  contentType     String?

  @@unique([userId, pagePath])
}

model Tasks {
  id             Int       @id @default(autoincrement())
  createdById    Int
  updatedById    Int
  createdOn      DateTime  @default(now())
  updatedOn      DateTime  @updatedAt
  startDate      DateTime?
  dueDate        DateTime?
  done           Boolean   @default(false)
  doneOn         DateTime?
  title          String    @db.VarChar(100)
  description    String?   @db.Text
  activityTypeId String?
}

model TaskDoers {
  id     Int @id @default(autoincrement())
  taskId Int
  doerId Int

  @@index([taskId])
  @@index([doerId])
}

model ModuleItems {
  id          Int      @id @default(autoincrement())
  createdById Int
  updatedById Int
  createdOn   DateTime @default(now())
  updatedOn   DateTime @updatedAt
  module      String
  data        Json
  title       String   @db.VarChar(100)
  description String?  @db.Text

  @@index([module])
}

model Modules {
  id   Int    @id @default(autoincrement())
  key  String
  name String

  @@unique([name])
  @@unique([key])
}

model ModuleFields {
  id         Int             @id @default(autoincrement())
  key        String
  title      String
  module     String
  valueType  EFieldValueType
  type       EFieldType
  additional Json? // options, text-length, mask, etc.
  required   Boolean

  @@unique([module, key])
  @@unique([module, title])
}

model ActivityTypes {
  id   Int    @id @default(autoincrement())
  name String

  @@unique([name])
}

enum ERole {
  SUPERADMIN
  ADMIN
  USER
}

enum EPermissionTypes {
  CREATE_OWN
  CREATE_ALL
  CREATE_DEPARTMENT
  CREATE_TAGGED
  READ_OWN
  READ_ALL
  READ_DEPARTMENT
  READ_TAGGED
  UPDATE_OWN
  UPDATE_ALL
  UPDATE_DEPARTMENT
  UPDATE_TAGGED
  DELETE_OWN
  DELETE_ALL
  DELETE_DEPARTMENT
  DELETE_TAGGED
  EXPORT_OWN
  EXPORT_ALL
  EXPORT_DEPARTMENT
  EXPORT_TAGGED
  IMPORT_OWN
  IMPORT_ALL
  IMPORT_DEPARTMENT
  IMPORT_TAGGED
}

enum EItemPermissionTypes {
  CREATE
  READ
  UPDATE
  DELETE
}

enum EFieldValueType {
  autoincrement
  string
  date
  datetime
  boolean
  number
  array
  object
  blob
  file
}

enum EFieldType {
  dropdown
  number
  text
  textarea
  datepicker
  switch
  checkbox
  phoneNumber
  email
  password
  fileUpload
  imageUpload
}
