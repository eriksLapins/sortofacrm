generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model TImage {
  clientId    Int
  id          String          @id @default(uuid())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  title       String
  extension   EImageExtension
  url         String
  size        Float
  caption     String?
  alt_text    String?
  description String?
  isTop       Boolean         @default(false)
  userId      String
  scope       EScope          @default(local)

  @@index([clientId])
  @@index([userId])
  @@index([createdAt])
  @@index([title])
  @@index([isTop])
  @@index([scope])
  @@map("images")
}

model TCategory {
  id      Int         @id @default(autoincrement())
  name    ECategories
  imageId String

  @@unique([name, imageId])
  @@index([name, imageId])
  @@map("categories")
}

model Account {
  clientId          Int
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  @@unique([provider, providerAccountId])
  @@index([clientId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  @@map("sessions")
}

model User {
  clientId       Int
  id             String    @id @default(cuid())
  role           ERole     @default(USER)
  name           String
  lastname       String
  initials       String
  email          String    @unique
  emailVerified  DateTime?
  username       String    @unique
  password       String?
  phoneExtension String?
  phoneNumber    String?
  image          String?
  position       String?
  departmentId   String

  @@index([clientId])
  @@index([departmentId])
  @@map("users")
}

model ClientCompany {
  id                    Int     @id @default(autoincrement())
  legalName             String
  alternateName         String?
  shortName             String
  regNo                 String
  taxNo                 String?
  street                String
  streetNo              Int
  apartmentNo           Int?
  city                  String
  country               String
  fullAddress           String
  phoneExtension        String
  phone                 String
  email                 String
  bankAccount           String
  swift                 String
  additionalBankAccount String?
  additionalSwift       String?
  webpage               String?
  logo                  String?
  uploadDirectory       String?
}

model Company {
  clientId              Int
  id                    String  @id @default(cuid())
  legalName             String
  alternateName         String?
  regNo                 String
  taxNo                 String?
  street                String
  streetNo              Int
  apartmentNo           Int?
  city                  String
  country               String
  fullAddress           String
  phoneExtension        String?
  phone                 String?
  email                 String
  bankAccount           String?
  swift                 String?
  additionalBankAccount String?
  additionalSwift       String?
  webpage               String?
  logo                  String?

  @@unique([clientId, regNo], map: "unique_company_client_regno_idx")
  @@unique([clientId, legalName], map: "unique_company_client_legal_idx")
  @@index([clientId])
  @@index([alternateName])
  @@index([legalName])
}

model Person {
  clientId       Int
  id             String  @id @default(cuid())
  name           String
  lastname       String?
  position       String?
  phoneExtension String?
  phone          String?
  email          String?
  department     String?

  @@unique([clientId, email], map: "unique_person_client_email_idx")
  @@index([name])
  @@index([lastname])
  @@index([email])
  @@index([clientId])
}

model Relations {
  clientId        Int
  id              String         @id @default(cuid())
  relatedFromType ERelationTypes
  relatedFromId   String /// ID of the person/company/etc making the relation from
  relatedToType   ERelationTypes
  relatedToId     String /// ID of the person/company/etc making the relation to

  @@index([clientId])
  @@index([relatedFromType])
  @@index([relatedToType])
}

model TPermissions {
  clientId Int
  id       String           @id @default(cuid())
  userId   String
  module   String
  can      EPermissionTypes

  @@index([clientId])
  @@index([userId])
  @@map("permissions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Pages {
  clientId Int
  userId   String
  id       String @id @default(cuid())
  name     String
  title    String
  order    Int

  @@unique([clientId, name], map: "unique_pages_client_name_idx")
  @@index([clientId, userId], map: "pages_client_user_idx")
}

model Blocks {
  id              String  @id @default(cuid())
  clientId        Int
  userId          String
  page            String  @db.VarChar(50)
  verticalOrder   Int     @default(0)
  horizontalOrder Int     @default(0)
  width           Int     @default(300)
  height          Int     @default(300)
  contentType     String?

  @@index([clientId, userId, page], map: "block_pages_client_user_idx")
}

model TTexts {
  id       Int       @id @default(autoincrement())
  page     String
  type     ETextType
  text     String    @db.Text
  language ELanguage

  @@map("texts")
}

model Tasks {
  id             String    @id @default(cuid())
  clientId       Int
  createdById    String
  updatedById    String
  createdOn      DateTime  @default(now())
  updatedOn      DateTime  @updatedAt
  dueDate        DateTime?
  done           Boolean   @default(false)
  doneOn         DateTime?
  managerId      String?
  quoteId        String?
  invoiceId      String?
  companyId      String?
  personId       String?
  projectId      String?
  title          String    @db.VarChar(100)
  description    String?   @db.Text
  activityTypeId String?

  @@index([clientId])
}

model TaskDoers {
  id       String @id @default(cuid())
  clientId Int
  taskId   String
  doerId   String

  @@index([clientId])
  @@index([clientId, taskId])
  @@index([clientId, doerId])
}

model ActivityTypes {
  id       String @id @default(cuid())
  clientId Int
  name     String

  @@unique([clientId, name])
  @@index([clientId])
}

enum EImageExtension {
  jpg
  jpeg
  png
  svg
  webp
}

enum ERole {
  SUPERADMIN
  ADMIN
  USER
}

enum ECategories {
  Animals
  Sports
  People
  Travel
  Nature
  Stills
  Views
}

enum ETextType {
  title
  image_url
  subtitle
  description
  text
  tooltip
}

enum ELanguage {
  lv
  eng
}

enum EPermissionTypes {
  CREATE_OWN
  CREATE_ALL
  CREATE_DEPARTMENT
  CREATE_TAGGED
  READ_OWN
  READ_ALL
  READ_DEPARTMENT
  READ_TAGGED
  UPDATE_OWN
  UPDATE_ALL
  UPDATE_DEPARTMENT
  UPDATE_TAGGED
  DELETE_OWN
  DELETE_ALL
  DELETE_DEPARTMENT
  DELETE_TAGGED
  EXPORT_OWN
  EXPORT_ALL
  EXPORT_DEPARTMENT
  EXPORT_TAGGED
  IMPORT_OWN
  IMPORT_ALL
  IMPORT_DEPARTMENT
  IMPORT_TAGGED
}

enum EContactRelationTypes {
  Person
  Company
}

enum EFinancialRelationTypes {
  Invoice
  Quote
  Expense
}

enum EProjectRelationTypes {
  Project
  Task
}

enum ERelationTypes {
  Person
  Company
  Invoice
  Quote
  Expense
  Project
  Task
}

enum EScope {
  local
  global
}
